{"version":3,"sources":["logo.svg","TextFieldMUI.jsx","Gallery.jsx","InputCom.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","makeStyles","theme","root","margin","spacing","width","Theme","createStyles","flexGrow","paper","padding","textAlign","color","palette","text","secondary","display","flexWrap","justifyContent","overflow","backgroundColor","background","useStyles","buttonStyle","input","extendedIcon","marginRight","InputCom","classes","ButtonCom","className","Button","variant","disabled","href","disableElevation","disableFocusRipple","disableRipple","accept","id","type","htmlFor","IconButton","aria-label","component","Fab","App","createContext","today","Date","getHours","getMinutes","getSeconds","useState","count","setCount","setInterval","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7eba6043.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport { Box, Container, CssBaseline, Grid, Paper, GridList, GridListTile} from '@material-ui/core';\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: 200,\n    },\n  },\n}));\n\nfunction ValidationTextFields() {\n  const classes = useStyles();\n  function formSubmit(e){\n    // e.preventDefault();\n  }\n  return (\n    <>\n    <div>\n      <Skeleton variant=\"text\" />\n      <Skeleton variant=\"circle\" width={40} height={40} />\n      <Skeleton variant=\"rect\" width={210} height={118} />\n    </div>\n    <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={formSubmit}>\n      <div>\n        <TextField error id=\"standard-error\" label=\"Error\" defaultValue=\"Hello World\" />\n        <TextField\n          id=\"standard-error-helper-text\"\n          label=\"Error\"\n          defaultValue=\"Hello World\"\n          helperText=\"Incorrect entry.\"\n        />\n      </div>\n      <button type=\"submit\">Submit</button>\n    </form>\n    </>\n    );\n}\n\nconst Demo = ()=>{\n  return (<Button variant=\"contained\" color=\"primary\">Hello World</Button>);\n}\nconst BoxCom = ()=>{\n  return (\n    <>\n    <CssBaseline></CssBaseline>\n    <Container maxWidth=\"sm\" style={{backgroundColor:'red',paddingTop:'40px'}}>\n      <Box component=\"div\"> \n        <Demo/>\n      </Box>\n    </Container>\n    <CssBaseline></CssBaseline>\n    <Container maxWidth=\"xl\" style={{backgroundColor:'yellow',paddingTop:'40px'}}>\n      <Box component=\"div\"> \n        <Demo/>\n      </Box>\n    </Container>\n    <CssBaseline></CssBaseline>\n    <Container style={{backgroundColor:'red',paddingTop:'40px'}} fixed>\n      <Box component=\"div\"> \n        <Demo/>\n      </Box>\n    </Container>\n    </>\n  );\n}\n\nconst gridStyles = makeStyles((Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: Theme.spacing(2),\n      textAlign: 'center',\n      color: Theme.palette.text.secondary,\n    },\n  }),\n);\n\nconst GridCom = ()=>{\n  const classes = gridStyles();\n  return (\n    <>\n      <div className={classes.root} style={{backgroundColor:'pink'}}>\n        <Grid container direction=\"row-reverse\" justify=\"center\" alignItems=\"flex-end\" spacing={3}>  \n          <Grid item xs={12} md={6}>\n            <Paper className={classes.paper}>xs-12 md-6</Paper>\n          </Grid>\n          <Grid item xs={6}>\n            <Paper className={classes.paper}>xs-6</Paper>\n          </Grid>\n          <Grid item xs={6} md={12}>\n            <Paper className={classes.paper}>xs-6 md-12</Paper>\n          </Grid>\n          <Grid item xs={12} md={6} lg={3}>\n            <Paper className={classes.paper}>xs-12  md-6 lg-3</Paper>\n          </Grid>\n          <Grid item xs={12} md={6} lg={3}>\n            <Paper className={classes.paper}>xs-12  md-6 lg-3</Paper>\n          </Grid>\n          <Grid item xs={12} md={6} lg={3}>\n            <Paper className={classes.paper}>xs-12  md-6 lg-3</Paper>\n          </Grid>\n          <Grid item xs={12} md={6} lg={3}>\n            <Paper className={classes.paper}>xs-12  md-6 lg-3</Paper>\n          </Grid>\n        </Grid>\n      </div>\n    </>\n  );\n}\n\nexport {ValidationTextFields,Demo,BoxCom, GridCom};","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    overflow: 'hidden',\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nconst tileData = [\n    {\n      img: \"https://material-ui.com/static/images/grid-list/bike.jpg\",\n      title: 'Bike',\n      author: 'author',\n      cols: 2,\n    },\n    {\n     img: \"https://material-ui.com/static/images/grid-list/breakfast.jpg\",\n     title: 'Breakfast',\n     author: 'author',\n     cols: 1,\n   },\n   {\n     img: \"https://material-ui.com/static/images/grid-list/camera.jpg\",\n     title: 'Camera',\n     author: 'author',\n     cols: 1,\n   },\n   {\n     img: \"https://material-ui.com/static/images/grid-list/hats.jpg\",\n     title: 'Hats',\n     author: 'author',\n     cols: 2,\n   },\n   {\n       title: 'Honey',\n     img: \"https://material-ui.com/static/images/grid-list/honey.jpg\",\n     author: 'author',\n     cols: 2,\n   },\n   {\n     img: \"https://material-ui.com/static/images/grid-list/morning.jpg\",\n     title: 'Morning',\n     author: 'author',\n     cols: 1,\n   },\n   {\n     img: \"https://material-ui.com/static/images/grid-list/olive.jpg\",\n     title: 'Olive',\n     author: 'author',\n     cols: 1,\n   },\n   {\n     img: \"https://material-ui.com/static/images/grid-list/plant.jpg\",\n     title: 'Plant',\n     author: 'author',\n     cols: 1,\n   },\n   {\n     img: \"https://material-ui.com/static/images/grid-list/vegetables.jpg\",\n     title: 'Vegetables',\n     author: 'author',\n     cols: 1,\n   }\n  ];\n\nexport default function ImageGridList() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <GridList cellHeight={160} cols={3}>\n        {tileData.map((tile) => (\n          <GridListTile style={{height:'350'}} key={tile.img} cols={tile.cols || 1}>\n            <img src={tile.img} alt={tile.title} />\n          </GridListTile>\n        ))}\n      </GridList>\n    </div>\n  );\n}","import React from 'react';\nimport { Button, makeStyles, IconButton, Fab } from '@material-ui/core';\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\nimport AddIcon from '@material-ui/icons/Add';\nimport EditIcon from '@material-ui/icons/Edit';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport NavigationIcon from '@material-ui/icons/Navigation';\nconst useStyles = makeStyles((theme)=>({\n    root:{\n        '& > *' : {\n            margin : theme.spacing(1),\n        },\n    },\n    buttonStyle:{\n        padding:'25px',\n    },\n    input:{\n        display:'none',\n    },\n    extendedIcon:{\n        marginRight:theme.spacing(1),\n    }\n}));\n\nconst InputCom =( )=>{\n    const classes = useStyles();\n    const ButtonCom = ()=>{\n        return(\n            <>\n                <div className={classes.root}>\n                    <Button variant = \"contained\" >Default</Button>\n                    <Button variant = \"contained\" color=\"primary\" >Primary</Button>\n                    <Button variant = \"contained\" color=\"secondary\" disabled >Secondary</Button>\n                    <Button variant = \"contained\" color=\"secondary\" href=\"www.google.com\" >Link</Button>\n                    <Button variant = \"contained\" className={classes.buttonStyle} color=\"primary\" >Primary</Button>\n                    <Button variant = \"contained\" className={classes.buttonStyle} color=\"primary\" disableElevation>Primary</Button>\n                    <Button variant = \"contained\" className={classes.buttonStyle} color=\"primary\" disableFocusRipple>Primary</Button>\n                    <Button variant = \"contained\" className={classes.buttonStyle} color=\"primary\" disableRipple>Primary</Button>\n                </div>\n                <div className={classes.root}>\n                    <Button variant = \"outlined\" color=\"primary\">Primary</Button>\n                    <input accept=\"image/*\" className={classes.input} id=\"icon-button-file\" type=\"file\" />\n                    <label htmlFor=\"icon-button-file\">\n                        <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\">\n                            <PhotoCamera/>\n                        </IconButton>\n                    </label>\n                </div>\n                <div className={classes.root}>\n                    <Fab color=\"primary\" aria-label=\"add\">\n                        <AddIcon />\n                    </Fab>\n                    <Fab color=\"secondary\" aria-label=\"edit\">\n                        <EditIcon />\n                    </Fab>\n                    <Fab variant=\"extended\">\n                        <NavigationIcon className={classes.extendedIcon} />\n                        Navigate\n                    </Fab>\n                    <Fab disabled aria-label=\"like\">\n                        <FavoriteIcon />\n                    </Fab>\n                </div>\n            </>\n        );\n    }\n    return(\n        <>\n            <h1>Input Components</h1>\n            <ButtonCom></ButtonCom>\n        </>\n    );\n}\nexport default InputCom;","import React, { useState, createContext } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ComC from './ComC';\nimport {LoginForm, RegistraionForm} from './LoginForm';\nimport Todolist from './TodoList';\nimport {ValidationTextFields,Demo,BoxCom,GridCom} from './TextFieldMUI';\nimport ImageGridList from './Gallery';\nimport InputCom from './InputCom';\n\nconst App = ()=> {\n  var today = new Date();\n  today = today.getHours() +\" : \"+today.getMinutes()+\" : \"+today.getSeconds();\n  const [current_time,setTime] = useState(today);\n\n  var [count,setCount] = useState(19);\n\n  const IncNum =()=>{\n    setCount(count+1);\n  }\n  const currentTime = ()=>{\n    today = new Date();\n    today = today.getHours() +\" : \"+today.getMinutes()+\" : \"+today.getSeconds();\n    setTime(today);\n  }\n  const tempCom = ()=>{\n    return(\n      <>\n        <Demo />\n        <BoxCom/>\n        <GridCom></GridCom>\n        <ImageGridList></ImageGridList>\n        <ContextAPI></ContextAPI>\n        <Todolist/>\n        <ValidationTextFields/>\n        <InputCom></InputCom>\n      </>\n    );\n  }\n  setInterval(()=>{\n    // currentTime();\n    IncNum();\n  },1000);\n  const IncrCom= ()=>{\n    return (\n      <>\n        <div className=\"App\">\n        <h1>{count}</h1>\n        {/* <button onClick={IncNum}>Click me</button> */}\n      </div>\n      <div className=\"App\">\n        <h1>{current_time}</h1>\n      </div>\n      </>\n    );\n  }\n  return (\n    <>\n    <InputCom></InputCom>\n    </>\n  );\n}\nconst tempData = \"This is temp data\";\nconst FirstName = createContext()\nconst ContextAPI = ()=>{\n  return (\n    <>\n    <FirstName.Provider value={{fname:\"Abhishek\",lname:\"Koushal\"}}>\n      <ComC/>\n    </FirstName.Provider>\n    </>\n  );\n}\n\nexport default App;\nexport {FirstName,ContextAPI,tempData};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { createContext } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App,{ContextAPI} from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    {/* <LoginForm/> */}\n    {/* <RegistraionForm></RegistraionForm> */}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}